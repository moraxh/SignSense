---
  import { Icon } from 'astro-icon/components'
---

<section class="grid lg:grid-cols-3 gap-6 mb-6 justify-center">
  <!-- Camera -->
  <section class="lg:col-span-2 max-w-[80vw]">
    <div class="flex flex-col gap-6 rounded-lg border shadow-sm h-full bg-bg/50 border-text/10 p-6">
      <!-- Title -->
      <section class="flex items-center gap-2 font-poppins text-2xl font-semibold text-text">
        <Icon name="lucide:camera" class="h-8 w-auto text-secondary" />
        Camera View
      </section>
      <!-- Content -->
      <section class="flex flex-col gap-3">
        <!-- Video -->
        <div class="relative aspect-video rounded-lg border border-text/10 overflow-hidden">
          <!-- Video Start Indicator -->
          <div id="video-start-indicator" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 border-4 border-dashed border-text/20 w-40 h-24 sm:w-55 sm:h-55 rounded-lg p-4 flex items-center justify-center text-pretty text-center font-bold text-xs sm:text-xl text-text/50">
            Click the button below to start the camera and begin detection.
          </div>

          <!-- Video Element -->
          <video id="video-preview" class="w-full h-full bg-black rounded-lg object-cover z-10" src="" autoplay muted />

          <!-- Video Status -->
          <span id="video-status" class="*:flex *:items-center *:gap-1.5 bg-bg/50 backdrop-blur-md text-text/70 absolute top-0 left-0 z-20 m-2 sm:m-5 text-xs sm:text-sm px-4 py-1 rounded-full font-bold">
            <div class="start" hidden>
              <span class="block w-2.5 h-2.5 rounded-full bg-primary" />
              Recording
            </div>
            <div class="stop">
              <span class="block w-2.5 h-2.5 rounded-full bg-danger" />
              Stopped
            </div>
          </span>

          <!-- Video Canvas -->
          <canvas id="video-canvas" hidden />
        </div>

        <!-- Start Recording Button -->
        <button id="toggle-recording-button" class="*:flex *:items-center *:justify-center *:gap-1 rounded-lg py-3 bg-primary hover:bg-primary/80 hover:cursor-pointer text-bg font-bold">
          <div class="start">
            <Icon name="lucide:play" class="h-5 w-auto" />
            Start Detection
          </div>
          <div class="stop" hidden>
            <Icon name="lucide:pause" class="h-5 w-auto" />
            Stop Detection
          </div>
        </button>
      </section>
    </div>
  </section>

  <!-- Feedback -->
  <section class="flex flex-col gap-6 max-w-[80vw]">
    <!-- Detected Letter -->
    <div class="flex flex-col gap-6 rounded-lg border shadow-sm h-full bg-bg/50 border-text/10 p-6">
      <!-- Title -->
      <section class="flex items-center gap-2 font-poppins text-2xl font-semibold text-text">
        <Icon name="lucide:a-large-small" class="h-8 w-auto text-secondary" />
        Detected Letter
      </section>
      <!-- Detected Letter Display -->
      <div id="detected-letter" class="min-h-48 mx-auto flex items-center justify-center aspect-square rounded-full bg-linear-60 from-primary via-40% to-secondary text-bg font-bold text-8xl font-poppins shadow-sm border-text/10 border" style="height: -webkit-fill-available;">
        ?
      </div>
    </div>

    <!-- Word Creation --> 
    <div class="flex flex-col justify-between gap-6 rounded-lg border shadow-sm bg-bg/50 border-text/10 p-6 h-auto">
      <!-- Title -->
      <section class="flex items-center gap-2 font-poppins text-2xl font-semibold text-text">
        <Icon name="lucide:whole-word" class="h-8 w-auto text-secondary" />
        Detected Word
      </section>

      <!-- Detected Word Display -->
      <input type="text" id="detected-word-display" placeholder="No word detected yet" class="bg-text/10 py-3 px-4 text-center rounded-lg text-text font-bold text-lg shadow-sm border-2 border-dashed border-text/10">
        
      </input>

      <!-- Clean Word -->
      <button id="detected-word-clear" class="rounded-lg py-2 px-5 bg-text/20 text-lg font-bold text-text/50 flex items-center justify-center gap-2 hover:bg-text/30 hover:cursor-pointer">
        <Icon name="lucide:trash-2" class="h-5 w-auto text-text/50" />
        Delete word
      </button>
    </div>
  </section>
</section>

<script>
  import { BACKEND_URL } from "astro:env/client";
  import { WebSocketManager } from "../lib/webSocketManager";

  class VideoCanvasManager {
    private readonly videoElement: HTMLVideoElement;
    private readonly canvasElement: HTMLCanvasElement;
    private readonly context: CanvasRenderingContext2D | null;

    constructor(videoElementId: string, canvasElementId: string) {
      const videoElement = document.getElementById(videoElementId) as HTMLVideoElement;
      const canvasElement = document.getElementById(canvasElementId) as HTMLCanvasElement;

      if (!videoElement || !canvasElement) {
        throw new Error(`Video or canvas element not found with IDs ${videoElementId} and ${canvasElementId}.`);
      }

      this.videoElement = videoElement;
      this.canvasElement = canvasElement;
      this.context = canvasElement.getContext("2d");
    }

    public drawFrame() {
      if (!this.context) {
        console.error("Canvas context is not available.");
        return;
      }

      this.canvasElement.width = 800;
      this.canvasElement.height = 600;

      this.context.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);
    }

    public getFrameAsBlob(): Promise<Blob | null> {
      return new Promise((resolve) => {
        if (!this.context) {
          resolve(null);
          return;
        }

        this.context.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);
        this.canvasElement.toBlob((blob) => {
          resolve(blob);
        }, "image/png");
      });
    }

    public clearCanvas() {
      if (this.context) {
        this.context.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
      }
    }
  }

  class VideoRecorderManager {
    private sendIntervalId: NodeJS.Timeout | null = null
    public mediaRecorder: MediaRecorder | null = null;
    private currentStream: MediaStream | null = null;
    private readonly videoCanvasManager: VideoCanvasManager;
    private readonly videoElement: HTMLVideoElement;
    private readonly webSocket: WebSocketManager
    
    constructor(webSocket: WebSocketManager, videoElementId: string) {
      const videoElement = document.getElementById(videoElementId) as HTMLVideoElement; 

      if (!videoElement) {
        throw new Error(`Video element with ID ${videoElementId} not found.`);
      }

      this.videoElement = videoElement;
      this.webSocket = webSocket;

      this.videoCanvasManager = new VideoCanvasManager(videoElementId, "video-canvas");
    }

    public async startRecording(sendInterval: number = 200) {
      try {
        if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
          this.mediaRecorder.stop();
        } 

        if (this.currentStream) {
          this.currentStream.getTracks().forEach(track => track.stop());
          this.currentStream = null;
        }

        if (this.sendIntervalId) {
          clearInterval(this.sendIntervalId)
          this.sendIntervalId = null
        }

        this.sendIntervalId = setInterval(async () => {
          this.videoCanvasManager.drawFrame();
          const blob = await this.videoCanvasManager.getFrameAsBlob();
          if (blob) {
            this.webSocket.send(blob)
          }
        }, sendInterval);
        

        this.currentStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });
        this.mediaRecorder = new MediaRecorder(this.currentStream, {
          mimeType: "video/webm; codecs=vp9",
          videoBitsPerSecond: 2500000,
        })

        this.videoElement.srcObject = this.currentStream;

        this.mediaRecorder.onstop = () => {
          this.mediaRecorder = null;
        }

        this.mediaRecorder.start()
      } catch (error) {
        this.handleError(error as Error);
      }
    }

    public async stopRecording() {
      if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
        this.mediaRecorder.stop()
      }

      if (this.currentStream) {
        this.currentStream.getTracks().forEach((track) => track.stop())
        this.currentStream = null
      }

      if (this.sendIntervalId) {
        clearInterval(this.sendIntervalId)
        this.sendIntervalId = null
      }
    }

    private handleError(error: Error): void {
      const errorMessages: Record<string, string> = {
        NotAllowedError: "Camera access denied. Please allow access to the camera in your browser settings.",
        NotFoundError: "No camera found. Please connect a camera and try again.",
        NotReadableError: "Camera is not readable. Please check your camera settings.",
        OverconstrainedError: "Camera constraints are not met. Please check your camera settings."
      }

      if (error.name in errorMessages) {
        alert(errorMessages[error.name])
      } else {
        console.error("Error starting audio recording: ", error)
      }
    }
  }

  function processPredictedLetters(predictedLetters: string[]): string {
    if (predictedLetters.length === 0) {
      return "No letters detected yet.";
    }

    const groups: Array<{letter: string, count: number}> = [];
    let i = 0;
    
    while (i < predictedLetters.length) {
      const current = predictedLetters[i];
      let count = 1;
      
      while (i + count < predictedLetters.length && predictedLetters[i + count] === current) {
        count++;
      }
      
      groups.push({letter: current, count: count});
      i += count;
    }

    const validGroups = groups.filter(group => 
      !Number.isNaN(Number(group.letter)) === false && group.count >= 3
    );

    const result = validGroups.map(group => group.letter);

    return result.join("") || "No word detected yet.";
  }

  function initializePredictionSignManager() {
    const detectedLetterElement = document.getElementById("detected-letter") as HTMLElement;
    const detectedWordDisplay = document.getElementById("detected-word-display") as HTMLInputElement;
    const detectedWordClearButton = document.getElementById("detected-word-clear") as HTMLButtonElement;
    const predictedLetters: string[] = []

    detectedWordClearButton.addEventListener("click", () => {
      predictedLetters.length = 0;
      detectedWordDisplay.value = "";
      detectedLetterElement.textContent = "?";
    });

    const webSocket = new WebSocketManager(
      `${BACKEND_URL}:5101`,
      (message) => {
        if ("predict" in message) {
          const predict = message["predict"];
          detectedLetterElement.textContent = predict === "" ? "?" : predict.toUpperCase();

          if (predict != "") {
            predictedLetters.push(predict.toUpperCase())
            detectedWordDisplay.value = processPredictedLetters(predictedLetters);
          }
        }
      },
      () => console.log("Disconnected from the prediction server"),
      () => console.error("Error connecting to the prediction server") 
    )
    webSocket.connect()

    const videoRecorder = new VideoRecorderManager(webSocket, "video-preview")
    const toggleRecordingButton = document.getElementById("toggle-recording-button") as HTMLButtonElement
    const toggleRecordingButtonStart = toggleRecordingButton.querySelector(".start") as HTMLElement
    const toggleRecordingButtonStop = toggleRecordingButton.querySelector(".stop") as HTMLElement

    const videoStatusIndicator = document.getElementById("video-status") as HTMLElement
    const videoStatusIndicatorStart = videoStatusIndicator.querySelector(".start") as HTMLElement 
    const videoStatusIndicatorStop = videoStatusIndicator.querySelector(".stop") as HTMLElement

    const videoStartIndicator = document.getElementById("video-start-indicator") as HTMLElement

    toggleRecordingButton.addEventListener("click", async () => {
      if (videoRecorder.mediaRecorder && videoRecorder.mediaRecorder.state === "recording") {
        await videoRecorder.stopRecording();

        toggleRecordingButtonStart.hidden = false;
        toggleRecordingButtonStop.hidden = true;

        videoStatusIndicatorStart.hidden = true;
        videoStatusIndicatorStop.hidden = false;

        videoStartIndicator.hidden = false;
      } else {
        await videoRecorder.startRecording();

        toggleRecordingButtonStart.hidden = true;
        toggleRecordingButtonStop.hidden = false;

        videoStatusIndicatorStart.hidden = false;
        videoStatusIndicatorStop.hidden = true;

        videoStartIndicator.hidden = true;
      } 
    })
  }

  function initializeApp(): void {
    initializePredictionSignManager()
  }

  initializeApp()
</script>